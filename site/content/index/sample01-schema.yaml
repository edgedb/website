title: Schema

columns:
  - lang: sdl
    body: |
      # This is an abstract object containing
      # text.
      abstract type Text {
        required body: str {
          # Maximum length of text is 10000
          # characters.
          constraint max_len_value(10000);
        }
      }

      type User {
        required name: str;
      }

      abstract type Owned {
        # By default links are optional.
        required owner: User;
      }

      # UniquelyNamed is a an abstract type that
      # enforces name uniqueness across all
      # instances of its subtype.
      abstract type UniquelyNamed {
        required name: str {
          delegated constraint exclusive;
        }
      }

      type Status extending UniquelyNamed;

      type Priority extending UniquelyNamed;

      # LogEntry is an Owned and a Text,
      # so it will have all of their links
      # and properties, in particular, the
      # "owner" link and the "body" property.
      type LogEntry extending Owned, Text {
        required spent_time: int64;
      }

      type Comment extending Text, Owned {
        required issue: Issue;
        parent: Comment;
      }

  - lang: sdl
    body: |
      # issue_num_t is defined as a concrete
      # sequence type, used to generate
      # sequential issue numbers.
      scalar type issue_num_t extending sequence;

      type Issue extending Owned, Text {
        required title: str;

        required number: issue_num_t {
          # The number values are automatically
          # generated, and are not supposed to be
          # directly writable.
          readonly := true;
        }

        time_estimate: int64;

        start_date: datetime {
          # The default value of start_date will be a
          # result of the EdgeQL expression above.
          default := (select datetime_current());
        }

        due_date: datetime;

        required status: Status;

        priority: Priority;

        # The watchers link is mapped to User
        # type in many-to-many relation.
        multi watchers: User;

        multi time_spent_log: LogEntry {
          # Exclusive multi-link represents
          # a one-to-many relation.
          constraint exclusive;
        }

        multi related_to: Issue;
      }
